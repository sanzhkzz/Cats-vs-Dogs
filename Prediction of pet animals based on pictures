{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9b63458a",
   "metadata": {},
   "source": [
    "## Bonus BD2002 Sanzar Sailaubek"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09aaf46f",
   "metadata": {},
   "source": [
    "In this assignment, you will write a neural network to classify whether images contain either a dog or a cat.\n",
    "Link to: https://www.kaggle.com/competitions/dogs-vs-cats/data\n",
    "Tasks to do:\n",
    "1. Import all the packages that you will need.\n",
    "2. Load your data and explore it. Describe how you will divide data for training, validation, and testing.\n",
    "3. Describe your chosen model and its architecture.\n",
    "4. Describe your evaluation metrics.\n",
    "5. Train your model.\n",
    "6. Show your hyperparameters.\n",
    "7. Evaluate your model.\n",
    "8. Show your results."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c44fcb8b",
   "metadata": {},
   "source": [
    "### 1. Import all the packages that you will need."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "80e4c06e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing necessary libraries\n",
    "import os\n",
    "import zipfile\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import ConfusionMatrixDisplay\n",
    "import zipfile\n",
    "import glob\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras import models\n",
    "from tensorflow.keras import regularizers\n",
    "from tensorflow.keras import optimizers\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.preprocessing import image\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "819636e7",
   "metadata": {},
   "source": [
    "### 2. Load your data and explore it. Describe how you will divide data for training, validation, and testing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a394d5d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    },
    {
     "ename": "FileNotFoundError",
     "evalue": "[WinError 3] Системе не удается найти указанный путь: '/kaggle/working/temp/train'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Input \u001b[1;32mIn [3]\u001b[0m, in \u001b[0;36m<cell line: 14>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     11\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m files \u001b[38;5;129;01min\u001b[39;00m zip_file:\n\u001b[0;32m     12\u001b[0m     extract_zip(files)\n\u001b[1;32m---> 14\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;28mlen\u001b[39m(\u001b[43mos\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mlistdir\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m/kaggle/working/temp/train\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m), \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtraining data\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     15\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;28mlen\u001b[39m(os\u001b[38;5;241m.\u001b[39mlistdir(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/kaggle/working/temp/test1\u001b[39m\u001b[38;5;124m'\u001b[39m)), \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest data\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     16\u001b[0m os\u001b[38;5;241m.\u001b[39mlistdir(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtemp\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [WinError 3] Системе не удается найти указанный путь: '/kaggle/working/temp/train'"
     ]
    }
   ],
   "source": [
    "# load data\n",
    "zip_file = glob.glob('/kaggle/input/dogs-vs-cats/*.zip')  #return any files with .zip extension\n",
    "print(zip_file)\n",
    "\n",
    "#extract file into a temp folder\n",
    "def extract_zip(file):\n",
    "    with zipfile.ZipFile(file,\"r\") as zip_ref:\n",
    "        zip_ref.extractall(\"temp\")\n",
    "        \n",
    "#extract both train and test1 zip\n",
    "for files in zip_file:\n",
    "    extract_zip(files)\n",
    "\n",
    "print(len(os.listdir('/kaggle/working/temp/train')), \"training data\")\n",
    "print(len(os.listdir('/kaggle/working/temp/test1')), \"test data\")\n",
    "os.listdir(\"temp\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2fd21e61",
   "metadata": {},
   "outputs": [],
   "source": [
    "# explore data\n",
    "\n",
    "'''\n",
    "create a target variable responsible for the picture class:\n",
    "cat and dog, because then I convert data to a Dataframe\n",
    "'''\n",
    "\n",
    "path = '/kaggle/working/temp/train/'\n",
    "filenames = os.listdir(path)\n",
    "filenames[:5]\n",
    "\n",
    "label = []\n",
    "for filename in filenames:\n",
    "    if filename.split('.')[0] =='cat': # cat = 1\n",
    "        label.append('1')\n",
    "    else:\n",
    "        label.append('0') # dog = 0\n",
    "        \n",
    "df = pd.DataFrame({\n",
    "                   'name':filenames,\n",
    "                   'label':label\n",
    "                 })\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9cdba28b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#histogram to check whether the label is correct sorted all the photos into classes\n",
    "\n",
    "print(df['label'].value_counts())\n",
    "sns.countplot(data=df, x=df['label']);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b95ffea7",
   "metadata": {},
   "outputs": [],
   "source": [
    "load_img(path+'cat.10001.jpg')\n",
    "фото"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42224024",
   "metadata": {},
   "source": [
    "### 3. Describe your chosen model and its architecture."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6d01007",
   "metadata": {},
   "source": [
    "Convolutional Neural Network (CNN) has been the to-go neural network architecture when dealing with images. From Yann LeCunn's LeNet in 1990s predicting digits on the popular MNIST data, to Alexnet impressive performance on ImageNet, the area of CNN has evolved tremendously.\n",
    "\n",
    "In this section, we will try to implement a CNN architecture from scratch, using the Keras library. We will be using just 5 epochs for all our training\n",
    "\n",
    "In this model, we use 5 consecutive blocks from Conv2D and MaxPooling2d with different filtering depths. Since we have a classification task, after 5 blocks we will transform our data into a 1D tensor and apply Dense Layers. The last dense layer should have 1 layer and activation=\"sigmoid\" since we have a binary classification task input_shape set (256, 256, 3) as a base for further use of the generator without resizing the image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c105ad0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = models.Sequential()\n",
    "model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(256, 256, 3)))\n",
    "model.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
    "model.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
    "model.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "model.add(layers.Flatten())\n",
    "model.add(layers.Dense(512, activation='relu'))\n",
    "model.add(layers.Dense(1, activation='sigmoid'))\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4b2b53b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#optimizer='Adam' as the most basic and recommended\n",
    "#loss='binary_crossentropy' since we have a binary classification\n",
    "#metrics='acc' since we have the same number of classes and accuracy is a suitable metric\n",
    "\n",
    "model.compile(optimizer='Adam', loss='binary_crossentropy', metrics='acc')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb79899b",
   "metadata": {},
   "source": [
    "### 4.Describe your evaluation metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d39fe3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# split the data in a ratio of 8:1:1 and with the same ratio of classes\n",
    "\n",
    "train, test_val = train_test_split(df, test_size=0.2, stratify=df['label'], random_state=17)\n",
    "test, val = train_test_split(test_val, test_size=0.5,  stratify=test_val['label'], random_state=17)\n",
    "\n",
    "print('train size:', train.shape[0],\n",
    "      '\\nvalidation size:', val.shape[0],\n",
    "      '\\ntest size:', test.shape[0],     \n",
    "     )\n",
    "print('train labels:\\n',train['label'].value_counts(),\n",
    "      '\\n\\nvalidataion labels:\\n',val['label'].value_counts(),\n",
    "      '\\n\\ntest labels:\\n',test['label'].value_counts(),\n",
    "      sep='')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d758a00",
   "metadata": {},
   "source": [
    "Splitting data into train, test, valid We will use proportions train:test:valid - 8:1:1\n",
    "\n",
    "+ On the train sample, we will train our model\n",
    "+ On the validation sample, we will check the ability of our model to generalize to unknown data\n",
    "+ On the test sample, we will make the final prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c8e9a71",
   "metadata": {},
   "source": [
    "Apply an ImageDataGenerator to our data to make it look like an input_shape for our model.\n",
    "\n",
    "Neural networks need to receive scaled data as input, for this we apply rescale=1./255\n",
    "\n",
    "In this case, the image size is not specified, because flow_from_dataframe creates target_size=(256, 256) and default color_mode='rgb'.\n",
    "\n",
    "Augmentation is the process of generating artificial images using rotations, mirroring, shifts and many other different methods based on existing ones."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dbeba086",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_gen = ImageDataGenerator(rescale=1./255)\n",
    "train_data = train_gen.flow_from_dataframe(train,\n",
    "                                           directory=path,\n",
    "                                           x_col='name',\n",
    "                                           y_col='label',\n",
    "                                           class_mode='binary',\n",
    "                                           seed=17                                          \n",
    "                                          )\n",
    "\n",
    "val_gen = ImageDataGenerator(rescale=1./255)\n",
    "val_data = val_gen.flow_from_dataframe(val,\n",
    "                                       directory=path,\n",
    "                                       x_col='name',\n",
    "                                       y_col='label',\n",
    "                                       class_mode='binary',\n",
    "                                       seed=17\n",
    "                                      )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4127f974",
   "metadata": {},
   "source": [
    "### 5. Train your model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5d6fa04",
   "metadata": {},
   "outputs": [],
   "source": [
    "history = model.fit(train_data,\n",
    "                    validation_data = val_data,\n",
    "                    epochs=10\n",
    "                   )\n",
    "\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "plt.plot(loss, label='Train loss')\n",
    "plt.plot(val_loss,'--', label='Val loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.xticks(np.arange(0,10))\n",
    "plt.yticks(np.arange(0, 0.7, 0.05));\n",
    "plt.grid()\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ade1db0d",
   "metadata": {},
   "source": [
    "We see the problem of overfitting, since after the 5th epoch, val loss stopped decreasing, but went up"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cfdb0c0",
   "metadata": {},
   "source": [
    "### 6. Show your hyperparameters."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2628a726",
   "metadata": {},
   "source": [
    "Augmentation is the process of generating artificial images using rotations, mirroring, shifts and other methods based on existing data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7da2c94",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data Preprocessing : Augmentation\n",
    "aug_gen = ImageDataGenerator(rescale = 1./255,\n",
    "                               shear_range = 0.2,\n",
    "                               zoom_range = 0.2,\n",
    "                               rotation_range=40,\n",
    "                               width_shift_range=0.2,\n",
    "                               height_shift_range=0.2,\n",
    "                               horizontal_flip=True,\n",
    "                               fill_mode='nearest'\n",
    "                              )\n",
    "\n",
    "img_cat = load_img(path+'cat.10001.jpg')\n",
    "img_dog = load_img(path+'dog.1280.jpg')\n",
    "\n",
    "img_cat_arr = image.img_to_array(img_cat)\n",
    "img_cat_arr = img_cat_arr.reshape((1,)+img_cat_arr.shape)\n",
    "\n",
    "img_dog_arr = image.img_to_array(img_dog)\n",
    "img_dog_arr = img_dog_arr.reshape((1,)+ img_dog_arr.shape)\n",
    "\n",
    "aug_images_cat = aug_gen.flow(img_cat_arr, batch_size=1)\n",
    "aug_images_dog = aug_gen.flow(img_dog_arr, batch_size=1)\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "plt.subplot(141)\n",
    "plt.imshow(img_cat)\n",
    "plt.title(\"original\")\n",
    "i=2\n",
    "for batch in aug_images_cat:\n",
    "    plt.subplot(14*10+i)\n",
    "    plt.imshow(image.array_to_img(batch[0]))\n",
    "    plt.title(\"augmented\")\n",
    "    i += 1\n",
    "    if i % 5 == 0:\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a737c0aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(15,8))\n",
    "plt.subplot(141)\n",
    "plt.imshow(img_dog)\n",
    "plt.title(\"original\")\n",
    "i=2\n",
    "for batch in aug_images_dog:\n",
    "    plt.subplot(14*10+i)\n",
    "    plt.imshow(image.array_to_img(batch[0]))\n",
    "    plt.title(\"augmented\")\n",
    "    i += 1\n",
    "    if i % 5 == 0:\n",
    "        break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d34046f",
   "metadata": {},
   "source": [
    "Apply augmentation to our train data. It is important to apply augmentation only to train data, not to val and test. We need to provide our model with a large sample of images so that it can learn to recognize patterns in images."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "339fcec6",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data = aug_gen.flow_from_dataframe(train,\n",
    "                                         directory=path,\n",
    "                                         x_col='name',\n",
    "                                         y_col='label',\n",
    "                                         class_mode='binary',\n",
    "                                         target_size=(224,224),\n",
    "                                         seed=17\n",
    "                                        )\n",
    "\n",
    "val_data = val_gen.flow_from_dataframe(val,\n",
    "                                       directory=path,\n",
    "                                       x_col='name',\n",
    "                                       y_col='label',\n",
    "                                       class_mode='binary',\n",
    "                                       target_size=(224,224),\n",
    "                                       seed=17  \n",
    "                                      )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e47a2e33",
   "metadata": {},
   "source": [
    "### 7. Evaluate your model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2970ff1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# howbase model looked\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c252d524",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_model = models.Sequential()\n",
    "\n",
    "best_model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))\n",
    "best_model.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "best_model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
    "best_model.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "best_model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
    "best_model.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "best_model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
    "best_model.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "best_model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
    "best_model.add(layers.MaxPooling2D((2, 2)))\n",
    "\n",
    "best_model.add(layers.Flatten())\n",
    "best_model.add(layers.Dense(512, activation='relu', kernel_regularizer=regularizers.l2(0.001)))\n",
    "best_model.add(layers.Dropout(0.2))\n",
    "best_model.add(layers.Dense(1, activation='sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d645ccdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00f85ed3",
   "metadata": {},
   "source": [
    "### 8. Show your results."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67f96190",
   "metadata": {},
   "source": [
    "Let's try to directly set the learning_rate to the optimizer, take a value slightly less than the default.\n",
    "\n",
    "Thus, we guarantee that our optimizer will not get stuck in the local minimum of the function, however, for this we reduce the learning rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c568825e",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_model.compile(optimizer=optimizers.Adam(learning_rate=5e-4), loss='binary_crossentropy', metrics='acc')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23c22266",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data = val_gen.flow_from_dataframe(test,\n",
    "                                        directory=path,\n",
    "                                        x_col='name',\n",
    "                                        y_col='label',\n",
    "                                        class_mode='binary',\n",
    "                                        target_size=(224,224),\n",
    "                                        shuffle=False,\n",
    "                                        seed=17  \n",
    "                                       )\n",
    "test_pred = best_model.predict(test_data)\n",
    "pred_label = test_pred > 0.5\n",
    "true_label = test_data.classes\n",
    "ConfusionMatrixDisplay(confusion_matrix(true_label, pred_label), display_labels=test_data.class_indices).plot();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20593720",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_model.evaluate(test_data)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
